Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 46.72      0.98     0.98 507611938     0.00     0.00  getPreviousBuffer
 15.33      1.30     0.32 10800001     0.00     0.00  movingWindowFilter
 11.50      1.54     0.24 64801499     0.00     0.00  movePointerBuffer
  5.27      1.65     0.11 75600005     0.00     0.00  getHeadBuffer
  5.27      1.76     0.11 64801499     0.00     0.00  insertToBuffer
  3.83      1.84     0.08 10800001     0.00     0.00  derivativeFilter
  2.88      1.90     0.06 10800001     0.00     0.00  lowPassFilter
  1.92      1.94     0.04 10800001     0.00     0.00  squaringFilter
  1.44      1.97     0.03 10800000     0.00     0.00  endOfFile
  1.44      2.00     0.03                             main
  0.96      2.02     0.02 10800001     0.00     0.00  filterNextData
  0.96      2.04     0.02 10800001     0.00     0.00  highPassFilter
  0.96      2.06     0.02        8     2.50     2.50  cleanupBuffer
  0.48      2.07     0.01 10800001     0.00     0.00  getNextData
  0.48      2.08     0.01        1    10.02    10.02  closeFile
  0.48      2.09     0.01                             toStringList
  0.24      2.09     0.01     1493     0.00     0.00  getAvgBuffer
  0.00      2.09     0.00   308002     0.00     0.00  insertToBufferPeak
  0.00      2.09     0.00   308002     0.00     0.00  movePointerBufferPeak
  0.00      2.09     0.00   297442     0.00     0.00  updateThresholds
  0.00      2.09     0.00   296668     0.00     0.00  updateNoRPeak
  0.00      2.09     0.00    17717     0.00     0.00  getPreviousPeak
  0.00      2.09     0.00    10615     0.00     0.00  calculateRR
  0.00      2.09     0.00    10615     0.00     0.00  getHeadPeak
  0.00      2.09     0.00    10560     0.00     0.00  foundRPeak
  0.00      2.09     0.00      774     0.00     0.00  calculateRRAVG1
  0.00      2.09     0.00      774     0.00     0.00  updateLowHighMiss
  0.00      2.09     0.00      719     0.00     0.00  calculateRRAVG2
  0.00      2.09     0.00      719     0.00     0.00  updateGUI
  0.00      2.09     0.00      719     0.00     0.01  updateNewRPeak
  0.00      2.09     0.00      719     0.00     0.00  updatePulse
  0.00      2.09     0.00       68     0.00     0.00  findPeakSearchback
  0.00      2.09     0.00       68     0.00     0.00  searchBack
  0.00      2.09     0.00        8     0.00     0.00  initBuffer
  0.00      2.09     0.00        2     0.00     0.00  cleanupBufferPeak
  0.00      2.09     0.00        2     0.00     0.00  initBufferPeak
  0.00      2.09     0.00        1     0.00     0.00  closeTestFile
  0.00      2.09     0.00        1     0.00     0.00  openFile
  0.00      2.09     0.00        1     0.00     0.00  openTestFiles

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2014 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.48% of 2.09 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.5    0.03    2.05                 main [1]
                0.02    1.91 10800001/10800001     filterNextData [2]
                0.02    0.02 10799999/75600005     getHeadBuffer [6]
                0.03    0.00 10800000/10800000     endOfFile [12]
                0.02    0.00 10799999/507611938     getPreviousBuffer [4]
                0.02    0.00       8/8           cleanupBuffer [13]
                0.01    0.00       1/1           closeFile [15]
                0.00    0.01   10560/10560       foundRPeak [17]
                0.00    0.00  307228/308002      insertToBufferPeak [23]
                0.00    0.00  296668/296668      updateNoRPeak [26]
                0.00    0.00       8/8           initBuffer [34]
                0.00    0.00       2/2           initBufferPeak [36]
                0.00    0.00       2/2           cleanupBufferPeak [35]
                0.00    0.00       1/1           openFile [38]
                0.00    0.00       1/1           openTestFiles [39]
                0.00    0.00       1/1           closeTestFile [37]
-----------------------------------------------
                0.02    1.91 10800001/10800001     main [1]
[2]     92.2    0.02    1.91 10800001         filterNextData [2]
                0.32    0.68 10800001/10800001     movingWindowFilter [3]
                0.06    0.19 10800001/10800001     lowPassFilter [7]
                0.08    0.16 10800001/10800001     derivativeFilter [9]
                0.02    0.19 10800001/10800001     highPassFilter [10]
                0.04    0.09 10800001/10800001     squaringFilter [11]
                0.02    0.04 10800001/64801499     insertToBuffer [5]
                0.01    0.00 10800001/10800001     getNextData [14]
-----------------------------------------------
                0.32    0.68 10800001/10800001     filterNextData [2]
[3]     47.9    0.32    0.68 10800001         movingWindowFilter [3]
                0.62    0.00 324000030/507611938     getPreviousBuffer [4]
                0.02    0.04 10800001/64801499     insertToBuffer [5]
-----------------------------------------------
                0.00    0.00   11895/507611938     getAvgBuffer [18]
                0.02    0.00 10799999/507611938     main [1]
                0.06    0.00 32400003/507611938     lowPassFilter [7]
                0.06    0.00 32400003/507611938     highPassFilter [10]
                0.06    0.00 32400003/507611938     derivativeFilter [9]
                0.15    0.00 75600005/507611938     getHeadBuffer [6]
                0.62    0.00 324000030/507611938     movingWindowFilter [3]
[4]     46.7    0.98    0.00 507611938         getPreviousBuffer [4]
-----------------------------------------------
                0.00    0.00      55/64801499     searchBack [22]
                0.00    0.00    1438/64801499     updateNewRPeak [19]
                0.02    0.04 10800001/64801499     lowPassFilter [7]
                0.02    0.04 10800001/64801499     highPassFilter [10]
                0.02    0.04 10800001/64801499     derivativeFilter [9]
                0.02    0.04 10800001/64801499     squaringFilter [11]
                0.02    0.04 10800001/64801499     movingWindowFilter [3]
                0.02    0.04 10800001/64801499     filterNextData [2]
[5]     16.7    0.11    0.24 64801499         insertToBuffer [5]
                0.24    0.00 64801499/64801499     movePointerBuffer [8]
-----------------------------------------------
                0.02    0.02 10799999/75600005     main [1]
                0.02    0.02 10800001/75600005     derivativeFilter [9]
                0.02    0.02 10800001/75600005     squaringFilter [11]
                0.03    0.04 21600002/75600005     lowPassFilter [7]
                0.03    0.04 21600002/75600005     highPassFilter [10]
[6]     12.2    0.11    0.15 75600005         getHeadBuffer [6]
                0.15    0.00 75600005/507611938     getPreviousBuffer [4]
-----------------------------------------------
                0.06    0.19 10800001/10800001     filterNextData [2]
[7]     12.1    0.06    0.19 10800001         lowPassFilter [7]
                0.03    0.04 21600002/75600005     getHeadBuffer [6]
                0.06    0.00 32400003/507611938     getPreviousBuffer [4]
                0.02    0.04 10800001/64801499     insertToBuffer [5]
-----------------------------------------------
                0.24    0.00 64801499/64801499     insertToBuffer [5]
[8]     11.5    0.24    0.00 64801499         movePointerBuffer [8]
-----------------------------------------------
                0.08    0.16 10800001/10800001     filterNextData [2]
[9]     11.3    0.08    0.16 10800001         derivativeFilter [9]
                0.06    0.00 32400003/507611938     getPreviousBuffer [4]
                0.02    0.04 10800001/64801499     insertToBuffer [5]
                0.02    0.02 10800001/75600005     getHeadBuffer [6]
-----------------------------------------------
                0.02    0.19 10800001/10800001     filterNextData [2]
[10]    10.2    0.02    0.19 10800001         highPassFilter [10]
                0.03    0.04 21600002/75600005     getHeadBuffer [6]
                0.06    0.00 32400003/507611938     getPreviousBuffer [4]
                0.02    0.04 10800001/64801499     insertToBuffer [5]
-----------------------------------------------
                0.04    0.09 10800001/10800001     filterNextData [2]
[11]     6.4    0.04    0.09 10800001         squaringFilter [11]
                0.02    0.04 10800001/64801499     insertToBuffer [5]
                0.02    0.02 10800001/75600005     getHeadBuffer [6]
-----------------------------------------------
                0.03    0.00 10800000/10800000     main [1]
[12]     1.4    0.03    0.00 10800000         endOfFile [12]
-----------------------------------------------
                0.02    0.00       8/8           main [1]
[13]     1.0    0.02    0.00       8         cleanupBuffer [13]
-----------------------------------------------
                0.01    0.00 10800001/10800001     filterNextData [2]
[14]     0.5    0.01    0.00 10800001         getNextData [14]
-----------------------------------------------
                0.01    0.00       1/1           main [1]
[15]     0.5    0.01    0.00       1         closeFile [15]
-----------------------------------------------
                                                 <spontaneous>
[16]     0.5    0.01    0.00                 toStringList [16]
-----------------------------------------------
                0.00    0.01   10560/10560       main [1]
[17]     0.2    0.00    0.01   10560         foundRPeak [17]
                0.00    0.00     719/719         updateNewRPeak [19]
                0.00    0.00      68/68          searchBack [22]
                0.00    0.00   10560/10615       calculateRR [28]
-----------------------------------------------
                0.00    0.00     719/1493        calculateRRAVG2 [21]
                0.00    0.00     774/1493        calculateRRAVG1 [20]
[18]     0.2    0.01    0.00    1493         getAvgBuffer [18]
                0.00    0.00   11895/507611938     getPreviousBuffer [4]
-----------------------------------------------
                0.00    0.00     719/719         foundRPeak [17]
[19]     0.2    0.00    0.00     719         updateNewRPeak [19]
                0.00    0.00     719/774         calculateRRAVG1 [20]
                0.00    0.00     719/719         calculateRRAVG2 [21]
                0.00    0.00    1438/64801499     insertToBuffer [5]
                0.00    0.00     719/308002      insertToBufferPeak [23]
                0.00    0.00     719/774         updateLowHighMiss [30]
                0.00    0.00     719/297442      updateThresholds [25]
                0.00    0.00     719/719         updateGUI [31]
-----------------------------------------------
                0.00    0.00      55/774         searchBack [22]
                0.00    0.00     719/774         updateNewRPeak [19]
[20]     0.1    0.00    0.00     774         calculateRRAVG1 [20]
                0.00    0.00     774/1493        getAvgBuffer [18]
-----------------------------------------------
                0.00    0.00     719/719         updateNewRPeak [19]
[21]     0.1    0.00    0.00     719         calculateRRAVG2 [21]
                0.00    0.00     719/1493        getAvgBuffer [18]
-----------------------------------------------
                0.00    0.00      68/68          foundRPeak [17]
[22]     0.0    0.00    0.00      68         searchBack [22]
                0.00    0.00      55/774         calculateRRAVG1 [20]
                0.00    0.00      55/64801499     insertToBuffer [5]
                0.00    0.00      68/68          findPeakSearchback [33]
                0.00    0.00      55/308002      insertToBufferPeak [23]
                0.00    0.00      55/297442      updateThresholds [25]
                0.00    0.00      55/774         updateLowHighMiss [30]
-----------------------------------------------
                0.00    0.00      55/308002      searchBack [22]
                0.00    0.00     719/308002      updateNewRPeak [19]
                0.00    0.00  307228/308002      main [1]
[23]     0.0    0.00    0.00  308002         insertToBufferPeak [23]
                0.00    0.00  308002/308002      movePointerBufferPeak [24]
-----------------------------------------------
                0.00    0.00  308002/308002      insertToBufferPeak [23]
[24]     0.0    0.00    0.00  308002         movePointerBufferPeak [24]
-----------------------------------------------
                0.00    0.00      55/297442      searchBack [22]
                0.00    0.00     719/297442      updateNewRPeak [19]
                0.00    0.00  296668/297442      updateNoRPeak [26]
[25]     0.0    0.00    0.00  297442         updateThresholds [25]
-----------------------------------------------
                0.00    0.00  296668/296668      main [1]
[26]     0.0    0.00    0.00  296668         updateNoRPeak [26]
                0.00    0.00  296668/297442      updateThresholds [25]
-----------------------------------------------
                0.00    0.00    7102/17717       findPeakSearchback [33]
                0.00    0.00   10615/17717       getHeadPeak [29]
[27]     0.0    0.00    0.00   17717         getPreviousPeak [27]
-----------------------------------------------
                0.00    0.00      55/10615       findPeakSearchback [33]
                0.00    0.00   10560/10615       foundRPeak [17]
[28]     0.0    0.00    0.00   10615         calculateRR [28]
                0.00    0.00   10615/10615       getHeadPeak [29]
-----------------------------------------------
                0.00    0.00   10615/10615       calculateRR [28]
[29]     0.0    0.00    0.00   10615         getHeadPeak [29]
                0.00    0.00   10615/17717       getPreviousPeak [27]
-----------------------------------------------
                0.00    0.00      55/774         searchBack [22]
                0.00    0.00     719/774         updateNewRPeak [19]
[30]     0.0    0.00    0.00     774         updateLowHighMiss [30]
-----------------------------------------------
                0.00    0.00     719/719         updateNewRPeak [19]
[31]     0.0    0.00    0.00     719         updateGUI [31]
                0.00    0.00     719/719         updatePulse [32]
-----------------------------------------------
                0.00    0.00     719/719         updateGUI [31]
[32]     0.0    0.00    0.00     719         updatePulse [32]
-----------------------------------------------
                0.00    0.00      68/68          searchBack [22]
[33]     0.0    0.00    0.00      68         findPeakSearchback [33]
                0.00    0.00    7102/17717       getPreviousPeak [27]
                0.00    0.00      55/10615       calculateRR [28]
-----------------------------------------------
                0.00    0.00       8/8           main [1]
[34]     0.0    0.00    0.00       8         initBuffer [34]
-----------------------------------------------
                0.00    0.00       2/2           main [1]
[35]     0.0    0.00    0.00       2         cleanupBufferPeak [35]
-----------------------------------------------
                0.00    0.00       2/2           main [1]
[36]     0.0    0.00    0.00       2         initBufferPeak [36]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[37]     0.0    0.00    0.00       1         closeTestFile [37]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[38]     0.0    0.00    0.00       1         openFile [38]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[39]     0.0    0.00    0.00       1         openTestFiles [39]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2014 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [28] calculateRR             [6] getHeadBuffer          [24] movePointerBufferPeak
  [20] calculateRRAVG1        [29] getHeadPeak             [3] movingWindowFilter
  [21] calculateRRAVG2        [14] getNextData            [38] openFile
  [13] cleanupBuffer           [4] getPreviousBuffer      [39] openTestFiles
  [35] cleanupBufferPeak      [27] getPreviousPeak        [22] searchBack
  [15] closeFile              [10] highPassFilter         [11] squaringFilter
  [37] closeTestFile          [34] initBuffer             [16] toStringList
   [9] derivativeFilter       [36] initBufferPeak         [31] updateGUI
  [12] endOfFile               [5] insertToBuffer         [30] updateLowHighMiss
   [2] filterNextData         [23] insertToBufferPeak     [19] updateNewRPeak
  [33] findPeakSearchback      [7] lowPassFilter          [26] updateNoRPeak
  [17] foundRPeak              [1] main                   [32] updatePulse
  [18] getAvgBuffer            [8] movePointerBuffer      [25] updateThresholds
